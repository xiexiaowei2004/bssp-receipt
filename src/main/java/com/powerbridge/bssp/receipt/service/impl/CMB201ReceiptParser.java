package com.powerbridge.bssp.receipt.service.impl;import com.baomidou.mybatisplus.mapper.EntityWrapper;import com.powerbridge.bssp.receipt.util.PostActionEnum;import com.powerbridge.bssp.sas_cmb.entity.*;import com.powerbridge.bssp.sas_cmb.service.*;import org.dom4j.Element;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Component;import java.util.List;/** * 项目名称：bssp Maven Webapp * 类名称：CMB201ReceiptParser * 类描述：耗料单审核回执 * 创建人：willChen * 创建时间：2017/6/27 17:59 * * @version 1.0 */@Component("CMB201")public class CMB201ReceiptParser extends AbstractReceiptParser {    @Autowired    private ISasCmbBscService sasCmbBscService;    @Autowired    private ISasCmbInvtService sasCmbInvtService;    @Autowired    private ISasCmbImgService sasCmbImgService;    @Autowired    private ISasCmbRbgService sasCmbRbgService;    @Autowired    private ISasCmbCusBscService sasCmbCusBscService;    @Autowired    private ISasCmbCusInvtService sasCmbCusInvtService;    @Autowired    private ISasCmbCusImgService sasCmbCusImgService;    @Autowired    private ISasCmbCusRbgService sasCmbCusRbgService;    @Autowired    private ISasCmbHisBscService sasCmbHisBscService;    @Autowired    private ISasCmbHisInvtService sasCmbHisInvtService;    @Autowired    private ISasCmbHisImgService sasCmbHisImgService;    @Autowired    private ISasCmbHisRbgService sasCmbHisRbgService;    @Override    public PostActionEnum postAction() throws Exception {        //表头service        bscService = sasCmbBscService;        if (compareToManageResult("SasCmbBsc")) {            try {                //回执状态为成功时才修改正式表数据                if (result.equals("1")) {                    //保存耗料单基本信息数据                    saveBsc();                    //保存耗料单清单列表                    saveInvt();                    //保存耗料单料件表                    saveImg();                    //保存耗料单边角料表                    saveRbg();                    //写入历史表表头                    insertHisBsc();                    //写入历史耗料单清单数据                    insertHisInvt();                    //写入历史耗料单料件表表数据                    insertHisImg();                    //写入历史耗料单边角料表                    insertHisRbg();                    //删除预录入表表头和表身                    deletePre();                }            } catch (Exception e) {                e.getStackTrace();                throw new RuntimeException(e);            }            return PostActionEnum.SUCCESS_1;        } else {            return PostActionEnum.SUCCESS_2;        }    }    /**     * 保存耗料单基本信息数据     *     * @throws Exception     */    private void saveBsc() throws Exception {        saveBsc(new SasCmbCusBsc(), sasCmbCusBscService);    }    /**     * 保存耗料单清单列表     *     * @throws Exception     */    private void saveInvt() throws Exception {        //处理耗料单清单列表数据        List<Element> elementList = getElementList("SasCmbInvt");        if (elementList != null) {            for (Element element : elementList) {                //保税清单编号                String bondInvtNo = element.elementText("bondInvtNo");                EntityWrapper dtEntityWrapper = new EntityWrapper();                dtEntityWrapper.eq("SEQ_NO", seqNo);                dtEntityWrapper.eq("BOND_INVT_NO", bondInvtNo);                dataElement = element;                saveDtDataElement(dtEntityWrapper, sasCmbInvtService, new SasCmbCusInvt(), sasCmbCusInvtService);            }        }    }    /**     * 保存耗料单料件表     *     * @throws Exception     */    private void saveImg() throws Exception {        //处理耗料单料件表数据        List<Element> elementList = getElementList("SasCmbImg");        if (elementList != null) {            for (Element element : elementList) {                //料件序号                String mtpckSeqno = element.elementText("mtpckSeqno");                EntityWrapper dtEntityWrapper = new EntityWrapper();                dtEntityWrapper.eq("SEQ_NO", seqNo);                dtEntityWrapper.eq("MTPCK_SEQNO", mtpckSeqno);                dataElement = element;                saveDtDataElement(dtEntityWrapper, sasCmbImgService, new SasCmbCusImg(), sasCmbCusImgService);            }        }    }    /**     * 保存耗料单边角料表     *     * @throws Exception     */    private void saveRbg() throws Exception {        //处理耗料单边角料表数据        List<Element> elementList = getElementList("SasCmbRbg");        if (elementList != null) {            for (Element element : elementList) {                //料件序号                String mtpckSeqno = element.elementText("mtpckSeqno");                EntityWrapper dtEntityWrapper = new EntityWrapper();                dtEntityWrapper.eq("SEQ_NO", seqNo);                dtEntityWrapper.eq("MTPCK_SEQNO", mtpckSeqno);                dataElement = element;                saveDtDataElement(dtEntityWrapper, sasCmbRbgService, new SasCmbCusRbg(), sasCmbCusRbgService);            }        }    }    /**     * 写入历史表表头，都是新增     *     * @throws Exception     */    private void insertHisBsc() throws Exception {        insertHis(new SasCmbHisBsc(), bscBeanObject, sasCmbHisBscService);    }    /**     * 写入历史耗料单清单数据     *     * @throws Exception     */    private void insertHisInvt() throws Exception {        insertHis(new SasCmbHisInvt(), sasCmbInvtService, sasCmbHisInvtService);    }    /**     * 写入历史耗料单料件表表数据     *     * @throws Exception     */    private void insertHisImg() throws Exception {        insertHis(new SasCmbHisImg(), sasCmbImgService, sasCmbHisImgService);    }    /**     * 写入历史耗料单边角料表     *     * @throws Exception     */    private void insertHisRbg() throws Exception {        insertHis(new SasCmbHisRbg(), sasCmbRbgService, sasCmbHisRbgService);    }    //删除预录入表头和表体数据    private void deletePre() throws Exception {        sasCmbBscService.deleteBySeqNo(seqNo);    }}