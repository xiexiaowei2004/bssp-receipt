package com.powerbridge.bssp.receipt.service.impl;import com.baomidou.mybatisplus.mapper.EntityWrapper;import com.baomidou.mybatisplus.service.IService;import com.powerbridge.bssp.cop_et.entity.*;import com.powerbridge.bssp.cop_et.service.*;import com.powerbridge.bssp.receipt.util.PostActionEnum;import org.dom4j.Element;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.math.BigDecimal;import java.util.List;/** * 项目名称：bssp Maven Webapp * 类名称：EMS201ReceiptParser * 类描述：企业联网档案库回执 * 创建人：danagao * 创建时间：2017/6/7 17:59 * * @version 1.0 */@Service("EMS201")public class EMS201ReceiptParser extends AbstractReceiptParser {    @Autowired    private IEtArcrpBscService etArcrpBscService;    @Autowired    private IEtArcrpExgService etArcrpExgService;    @Autowired    private IEtArcrpImgService etArcrpImgService;    @Autowired    private IEtArcrpAcmpFormDtService etArcrpAcmpFormDtService;    @Autowired    private IEtCusBscService etCusBscService;    @Autowired    private IEtCusExgService etCusExgService;    @Autowired    private IEtCusImgService etCusImgService;    @Autowired    private IEtHisBscService etHisBscService;    @Autowired    private IEtHisExgService etHisExgService;    @Autowired    private IEtHisImgService etHisImgService;    @Autowired    private IEtHisAcmpFormDtService etHisAcmpFormDtService;    @Override    public PostActionEnum postAction() throws Exception {        //表头service        bscService = etArcrpBscService;        if (compareToManageResult("EtArcrpBsc")) {            try {                //回执状态为成功时才修改正式表数据                if (result.equals("1")) {                    //保存档案库正式表数据                    saveBsc();                    //保存档案库正式成品料件数据                    saveDt();                    //写入历史表表头                    insertHisBsc();                    //写入历史成品料件表数据                    insertHisDt();                    //写入历史随附单证表                    insertHisAcmpFormDt();                    //删除预录入表表头和表身                    deletePre();                }            } catch (Exception e) {                e.getStackTrace();                throw new RuntimeException(e);            }            return PostActionEnum.SUCCESS_1;        } else {            return PostActionEnum.SUCCESS_2;        }    }    /**     * 保存正式表数据     *     * @throws Exception     */    private void saveBsc() throws Exception {        saveBsc(new EtCusBsc(), etCusBscService);    }    /**     * 保存正式表表体数据     *     * @throws Exception     */    private void saveDt() throws Exception {        //处理表体数据        List<Element> elementList = getElementList("EtArcrpDt");        if (elementList != null) {            for (Element element : elementList) {                //料件成品类型代码 E：成品 I：料件                String mtpckEndprdTypecd = element.elementText("mtpckEndprdTypecd");                //根据不同类型代码编辑不同数据                if (mtpckEndprdTypecd == null) {                    throw new Exception("料件成品标记代码为空");                }                //根据不同类型代码编辑不同数据                Boolean isE = mtpckEndprdTypecd.equals("E");                //预录入表服务                IService arcrpDtService = isE ? etArcrpExgService : etArcrpImgService;                //正式表对象                Object cusDtObject = isE ? new EtCusExg() : new EtCusImg();                //正式表服务                IService cusDtService = isE ? etCusExgService : etCusImgService;                //商品序号                BigDecimal gdsSeqno = new BigDecimal(element.elementText("gdsSeqno"));                //查找出预录入记录                EntityWrapper dtEntityWrapper = new EntityWrapper();                dtEntityWrapper.eq("SEQ_NO", seqNo);                dtEntityWrapper.eq("GDS_SEQNO", gdsSeqno);                //保存表体节点数据                dataElement = element;                saveDtDataElement(dtEntityWrapper, arcrpDtService, cusDtObject, cusDtService);            }        }    }    //写入历史表表头，都是新增    private void insertHisBsc() throws Exception {        //写入历史表表头        insertHis(new EtHisBsc(), bscBeanObject, etHisBscService);    }    //写入历史表表体，都是新增，从预录入表查询    private void insertHisDt() throws Exception {        //成品历史表        insertHis(new EtHisExg(), etArcrpExgService, etHisExgService);        //料件历史表        insertHis(new EtHisImg(), etArcrpImgService, etHisImgService);    }    //写入历史随附单证表，都是新增    private void insertHisAcmpFormDt() throws Exception {        insertHis(new EtHisAcmpFormDt(), etArcrpAcmpFormDtService, etHisAcmpFormDtService);    }    //删除预录入表头和表体数据    private void deletePre() throws Exception {        etArcrpBscService.deleteBySeqNo(seqNo);    }}