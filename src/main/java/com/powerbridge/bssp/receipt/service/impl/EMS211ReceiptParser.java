package com.powerbridge.bssp.receipt.service.impl;import com.baomidou.mybatisplus.mapper.EntityWrapper;import com.baomidou.mybatisplus.service.IService;import com.powerbridge.bssp.ems.entity.*;import com.powerbridge.bssp.ems.service.*;import com.powerbridge.bssp.receipt.util.PostActionEnum;import org.dom4j.Element;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Component;import java.math.BigDecimal;import java.util.List;/** * 项目名称：bssp Maven Webapp * 类名称：EMS211ReceiptParser * 类描述：加工账册备案回执 * 创建人：danagao * 创建时间：2017/6/7 17:59 * * @version 1.0 */@Component("EMS211")public class EMS211ReceiptParser extends AbstractReceiptParser {    @Autowired    private IEmsPutrecBscService emsPutrecBscService;    @Autowired    private IEmsPutrecExgService emsPutrecExgService;    @Autowired    private IEmsPutrecImgService emsPutrecImgService;    @Autowired    private IEmsPutrecUcnsDtService emsPutrecUcnsDtService;    @Autowired    private IEmsPutrecAcmpFormDtService emsPutrecAcmpFormDtService;    @Autowired    private IEmsCusBscService emsCusBscService;    @Autowired    private IEmsCusExgService emsCusExgService;    @Autowired    private IEmsCusImgService emsCusImgService;    @Autowired    private IEmsCusUcnsDtService emsCusUcnsDtService;    @Autowired    private IEmsHisBscService emsHisBscService;    @Autowired    private IEmsHisExgService emsHisExgService;    @Autowired    private IEmsHisImgService emsHisImgService;    @Autowired    private IEmsHisUcnsDtService emsHisUcnsDtService;    @Autowired    private IEmsHisAcmpFormDtService emsHisAcmpFormDtService;    @Override    public PostActionEnum postAction() throws Exception {        //表头service        bscService = emsPutrecBscService;        if (compareToManageResult("EmsPutrecBsc")) {            try {                //回执状态为成功时才修改正式表数据                if (result.equals("1")) {                    //保存正式表表头数据                    saveBsc();                    //保存正式成品料件表数据                    saveDt();                    //保存正式损耗表数据                    saveUcnsDt();                    //是否是同一个包中最后一份数据 同一个包只执行一次                    if ((boolean) infoMap.get("isLastData")) {                        //写入历史表表头                        insertHisBsc();                        //写入历史成品料件表数据                        insertHisDt();                        //写入历史损耗表数据                        insertHisUcnsDt();                        //写入历史随附单证表                        insertHisAcmpFormDt();                        //删除预录入表表头和表身                        deletePre();                    }                }            } catch (Exception e) {                e.getStackTrace();                throw new RuntimeException(e);            }            return PostActionEnum.SUCCESS_1;        } else {            return PostActionEnum.SUCCESS_2;        }    }    /**     * 保存正式表数据     *     * @throws Exception     */    private void saveBsc() throws Exception {        saveBsc(new EmsCusBsc(), emsCusBscService);    }    /**     * 保存正式成品料件表数据     *     * @throws Exception     */    private void saveDt() throws Exception {        //处理表体数据        List<Element> elementList = getElementList("EmsPutrecDt");        if (elementList != null) {            for (Element element : elementList) {                //料件成品类型代码 E：成品 I：料件                String mtpckEndprdTypecd = element.elementText("mtpckEndprdTypecd");                if (mtpckEndprdTypecd == null) {                    throw new Exception("料件成品标记代码为空");                }                //根据不同类型代码编辑不同数据                Boolean isE = mtpckEndprdTypecd.equals("E");                //预录入表服务                IService arcrpDtService = isE ? emsPutrecExgService : emsPutrecImgService;                //正式表对象                Object cusDtObject = isE ? new EmsCusExg() : new EmsCusImg();                //正式表服务                IService cusDtService = isE ? emsCusExgService : emsCusImgService;                //商品序号                BigDecimal gdsSeqno = new BigDecimal(element.elementText("gdsSeqno"));                //查找出预录入记录                EntityWrapper dtEntityWrapper = new EntityWrapper();                dtEntityWrapper.eq("SEQ_NO", seqNo);                dtEntityWrapper.eq("GDS_SEQNO", gdsSeqno);                //保存表体节点数据                dataElement = element;                saveDtDataElement(dtEntityWrapper, arcrpDtService, cusDtObject, cusDtService);            }        }    }    /**     * 保存正式表单损耗数据     *     * @throws Exception     */    private void saveUcnsDt() throws Exception {        //处理表体数据        List<Element> elementList = getElementList("EmsPutrecUcnsDt");        if (elementList != null) {            for (Element element : elementList) {                //获取成品序号，料件序号，单耗版本号，用于查出单条单耗数据                BigDecimal endprdSeqno = new BigDecimal(element.elementText("endprdSeqno"));                BigDecimal mtpckSeqno = new BigDecimal(element.elementText("mtpckSeqno"));                String ucnsVerno = element.elementText("ucnsVerno");                EntityWrapper dtEntityWrapper = new EntityWrapper();                dtEntityWrapper.eq("SEQ_NO", seqNo);                dtEntityWrapper.eq("ENDPRD_SEQNO", endprdSeqno);  //成品序号                dtEntityWrapper.eq("MTPCK_SEQNO", mtpckSeqno);    //料件序号                dtEntityWrapper.eq("UCNS_VERNO", ucnsVerno);      //单耗版本号                //保存表体节点数据                dataElement = element;                saveDtDataElement(dtEntityWrapper, emsPutrecUcnsDtService, new EmsCusUcnsDt(), emsCusUcnsDtService);            }        }    }    //写入历史表表头，都是新增    private void insertHisBsc() throws Exception {        //写入历史表表头        insertHis(new EmsHisBsc(), bscBeanObject, emsHisBscService);    }    //写入历史成品和料件表，都是新增，从预录入表查询    private void insertHisDt() throws Exception {        //成品历史表        insertHis(new EmsHisExg(), emsPutrecExgService, emsHisExgService);        //料件历史表        insertHis(new EmsHisImg(), emsPutrecImgService, emsHisImgService);    }    //写入历史单耗表，都是新增，从预录入表查询    private void insertHisUcnsDt() throws Exception {        //单耗历史表        insertHis(new EmsHisUcnsDt(), emsPutrecUcnsDtService, emsHisUcnsDtService);    }    //写入历史随附单证表，都是新增，从预录入表查询    private void insertHisAcmpFormDt() throws Exception {        insertHis(new EmsHisAcmpFormDt(), emsPutrecAcmpFormDtService, emsHisAcmpFormDtService);    }    //删除预录入表头和表体数据    private void deletePre() throws Exception {        emsPutrecBscService.deleteBySeqNo(seqNo);    }}