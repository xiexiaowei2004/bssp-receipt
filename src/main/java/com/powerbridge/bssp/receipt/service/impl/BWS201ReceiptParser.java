package com.powerbridge.bssp.receipt.service.impl;import com.baomidou.mybatisplus.mapper.EntityWrapper;import com.powerbridge.bssp.ems_bws.entity.*;import com.powerbridge.bssp.ems_bws.service.*;import com.powerbridge.bssp.receipt.util.PostActionEnum;import org.dom4j.Element;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Component;import java.math.BigDecimal;import java.util.List;/** * 项目名称：bssp Maven Webapp * 类名称：BWS201ReceiptParser * 类描述：物流账册审核回执<BWS201> * 创建人：XWQ * 创建时间：2017-06-17 14:16:03 * * @version 1.0 */@Component("BWS201")public class BWS201ReceiptParser extends AbstractReceiptParser {    @Autowired    private IEmsBwsBscService emsBwsBscService;    @Autowired    private IEmsBwsDtService emsBwsDtService;    @Autowired    private IEmsBwsAcmpFormDtService emsBwsAcmpFormDtService;    @Autowired    private IEmsBwsCusBscService emsBwsCusBscService;    @Autowired    private IEmsBwsCusDtService emsBwsCusDtService;    @Autowired    private IEmsBwsHisBscService emsBwsHisBscService;    @Autowired    private IEmsBwsHisDtService emsBwsHisDtService;    @Autowired    private IEmsBwsHisAcmpFormDtService emsBwsHisAcmpFormDtService;    @Override    public PostActionEnum postAction() throws Exception {        //表头service        bscService = emsBwsBscService;        if (compareToManageResult("BwsBsc")) {            try {                //回执状态为成功时才修改正式表数据                if (result.equals("1")) {                    //保存正式表表头数据                    saveBsc();                    //保存正式成品料件表数据                    saveDt();                    //写入历史表表头                    insertHisBsc();                    //写入历史成品料件表数据                    insertHisDt();                    //写入历史随附单证表数据                    insertHisAcmpFormDt();                    //删除预录入表表头和表身                    deletePre();                }            } catch (Exception e) {                e.getStackTrace();                throw new RuntimeException(e);            }            return PostActionEnum.SUCCESS_1;        } else {            return PostActionEnum.SUCCESS_2;        }    }    /**     * 保存正式表数据     *     * @throws Exception     */    private void saveBsc() throws Exception {        saveBsc(new EmsBwsCusBsc(), emsBwsCusBscService);    }    /**     * 保存账册备案明细表数据     *     * @throws Exception     */    private void saveDt() throws Exception {        //处理表体数据        List<Element> elementList = getElementList("BwsDt");        if (elementList != null) {            for (Element element : elementList) {                //商品序号                BigDecimal gdsSeqno = new BigDecimal(element.elementText("gdsSeqno"));                EntityWrapper dtEntityWrapper = new EntityWrapper<>();                dtEntityWrapper.eq("GDS_SEQNO", gdsSeqno);// 商品序号                dtEntityWrapper.eq("SEQ_NO", seqNo);// 单据编号                //保存表体节点数据                dataElement = element;                saveDtDataElement(dtEntityWrapper, emsBwsDtService, new EmsBwsCusDt(), emsBwsCusDtService);            }        }    }    //写入历史表表头，都是新增    private void insertHisBsc() throws Exception {        insertHis(new EmsBwsHisBsc(), emsBwsBscService, emsBwsHisBscService);    }    //写入历史成品和料件表，都是新增，从预录入表查询    private void insertHisDt() throws Exception {        insertHis(new EmsBwsHisDt(), emsBwsDtService, emsBwsHisDtService);    }    //写入历史随附单证表，都是新增，从预录入表查询    private void insertHisAcmpFormDt() throws Exception {        insertHis(new EmsBwsHisAcmpFormDt(), emsBwsAcmpFormDtService, emsBwsHisAcmpFormDtService);    }    //删除预录入表头和表体数据    private void deletePre() throws Exception {        emsBwsBscService.deleteBySeqNo(seqNo);    }}