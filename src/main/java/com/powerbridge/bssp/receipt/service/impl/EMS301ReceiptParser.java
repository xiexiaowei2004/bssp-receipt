package com.powerbridge.bssp.receipt.service.impl;import com.baomidou.mybatisplus.mapper.EntityWrapper;import com.baomidou.mybatisplus.service.IService;import com.powerbridge.bssp.ems.entity.*;import com.powerbridge.bssp.ems.service.IEmsCusBscService;import com.powerbridge.bssp.ems.service.IEmsCusExgService;import com.powerbridge.bssp.ems.service.IEmsCusImgService;import com.powerbridge.bssp.ems.service.IEmsCusUcnsDtService;import com.powerbridge.bssp.receipt.util.PostActionEnum;import com.powerbridge.bssp.receipt.util.XMLUtils;import org.dom4j.Element;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Component;import java.math.BigDecimal;import java.util.List;/** * 项目名称：bssp Maven Webapp * 类名称：EMS301ReceiptParser * 类描述：账册同步报文 * 创建人：danagao * 创建时间：2017/6/27 17:59 * * @version 1.0 */@Component("EMS301")public class EMS301ReceiptParser extends AbstractReceiptParser {    @Autowired    private IEmsCusBscService emsCusBscService;    @Autowired    private IEmsCusExgService emsCusExgService;    @Autowired    private IEmsCusImgService emsCusImgService;    @Autowired    private IEmsCusUcnsDtService emsCusUcnsDtService;    @Override    public PostActionEnum postAction() throws Exception {        //获取回执xml数据        bscElement = XMLUtils.getElementByXpath("//EmsPutrecBsc", document);        chgTmsCnt = Integer.parseInt(bscElement.elementText("chgTmsCnt"));        bscService = emsCusBscService;        try {            //保存正式表数据            saveBsc();            //保存正式成品料件表数据            saveDt();            //保存正式损耗表数据            saveUcnsDt();        } catch (Exception e) {            e.printStackTrace();            throw new RuntimeException(e);        }        return PostActionEnum.SUCCESS_2;    }    /**     * 保存正式表数据     *     * @throws Exception     */    private void saveBsc() throws Exception {        bscBeanObject = new EmsPutrecBsc();        //只修改 1：修改        saveBsc(new EmsCusBsc(), emsCusBscService, 1);    }    /**     * 保存正式成品料件表数据     *     * @throws Exception     */    private void saveDt() throws Exception {        //处理表体数据        List<Element> elementList = getElementList("EmsPutrecDt");        if (elementList != null) {            for (Element element : elementList) {                //料件成品类型代码 E：成品 I：料件                String mtpckEndprdTypecd = element.elementText("mtpckEndprdTypecd");                if (mtpckEndprdTypecd == null) {                    throw new Exception("料件成品标记代码为空");                }                //根据不同类型代码编辑不同数据                Boolean isE = mtpckEndprdTypecd.equals("E");                Object arcrpObject = isE ? new EmsPutrecExg() : new EmsPutrecImg();                //正式表对象                Object cusObject = isE ? new EmsCusExg() : new EmsCusImg();                //正式表服务                IService cusService = isE ? emsCusExgService : emsCusImgService;                //商品序号                BigDecimal gdsSeqno = new BigDecimal(element.elementText("gdsSeqno"));                //修改条件                EntityWrapper dtEntityWrapper = new EntityWrapper();                dtEntityWrapper.eq("SEQ_NO", seqNo);                dtEntityWrapper.eq("GDS_SEQNO", gdsSeqno);                //同步暂时认为只做修改 1：修改                dataElement = element;                saveDtDataElement(dtEntityWrapper, arcrpObject, cusObject, cusService, "1");            }        }    }    /**     * 保存正式表单损耗数据     *     * @throws Exception     */    private void saveUcnsDt() throws Exception {        //处理表体数据        List<Element> elementList = getElementList("EmsPutrecUcnsDt");        if (elementList != null) {            for (Element element : elementList) {                //获取成品序号，料件序号，单耗版本号，用于查出单条单耗数据                BigDecimal endprdSeqno = new BigDecimal(element.elementText("endprdSeqno"));                BigDecimal mtpckSeqno = new BigDecimal(element.elementText("mtpckSeqno"));                String ucnsVerno = element.elementText("ucnsVerno");                EntityWrapper dtEntityWrapper = new EntityWrapper();                dtEntityWrapper.eq("SEQ_NO", seqNo);                dtEntityWrapper.eq("ENDPRD_SEQNO", endprdSeqno);  //成品序号                dtEntityWrapper.eq("MTPCK_SEQNO", mtpckSeqno);    //料件序号                dtEntityWrapper.eq("UCNS_VERNO", ucnsVerno);      //单耗版本号                //同步暂时认为只做修改 1：修改                dataElement = element;                saveDtDataElement(dtEntityWrapper, new EmsPutrecUcnsDt(), new EmsCusUcnsDt(), emsCusUcnsDtService, "1");            }        }    }}